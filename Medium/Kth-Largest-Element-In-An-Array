
// Initial Solution
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int max = 0; // the index to retrieve number
        int highest = 0; // Store highest number
        std::vector<int> sorted; // New array to put sorted elements
        
        for(int i=0; i<nums.size(); i++) {
            sorted.push_back(nums[i]); // push elements into new array
        }
        
        std::sort(sorted.begin(),sorted.end()); // sort elements
        max = sorted.size()-k; // find right indedfdfx
        
        for(int i = 0; i<sorted.size(); i++) {
           if(max==i) { 
               highest = sorted[i]; // if index matches right i, assign to highest and then return
           }
        }
        return highest;
    }
};

// Cleaner code Solution

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
         
        std::sort(nums.begin(),nums.end()); // sort elements
        int max = nums.size()-k; // find right index
        return nums[max]; 

    }
};



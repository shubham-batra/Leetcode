
// O(n^2) solution
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        // Need to define left and right;
        int left = 0;
        int right = 0;
        // One for loop for changing left
        for(int i = 0; i<nums.size()-1; i++) {
        // Another for loop for changing right. 
            for(int j = i+1; j<nums.size(); j++) {
        // If sum hit target, then make equal index.
                if(nums[i]+nums[j]==target) {
                    left = i;
                    right = j;
                }
            }      
        }
        return {left,right};
    }
};

// O(n) solution
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    // Hash Map Solution
    unordered_map<int,int> myMap;
    vector<int> arr;
        
    // Insert elements into map
    for(int i = 0; i<nums.size(); i++) {
        //2(0), 1(7)..etc. Saving each index to unique value
        myMap[nums[i]]=i;  
    }
        
    // Find an answer
    for(int i = 0; i<nums.size(); i++) {
        int comp = target - nums[i];
        // If x exists and the value x is not itself, then answer is found
        if(myMap[comp]  && myMap[comp] != i) {
                return{i,myMap[comp]};
            }
        }
        return arr;
    }
};

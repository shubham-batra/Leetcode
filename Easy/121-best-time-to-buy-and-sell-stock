// (O^2) Solution
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int profit = 0;
        // Iterate through both arrays, put largest profit in the variable
        for(int i = 0; i<prices.size()-1; i++) {
            for(int j = i+1; j<prices.size(); j++) {
                if(prices[j]-prices[i]>profit) {
                    profit = prices[j]-prices[i];
                }
            }
        }
        if(profit<=0) {
            return 0;
        }
        else {
            return profit;
        }
    }
};

// O(N) solution

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        // O(n) solution
        
        int profit = 0;
        int min = INT_MAX;
        
        for(int i = 0; i<prices.size(); i++) {
            // If current lower than min, set to min.
            if(prices[i]<min) {
                min = prices[i];
            }
            // Otherwise, simply check if current-min is a higher profit
            else if(prices[i]-min>profit) {
                profit = prices[i]-min;
            }
        }
        return profit;
    }
};